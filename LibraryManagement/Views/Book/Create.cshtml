@model LibraryManagement.DTOs.BookDTO

@{
    ViewBag.Title = "Create";
}

<div class="page-header">
    <div class="container">
        <div class="row p-b-lg">
            <div class="col-md-19">
                <h1>Create a new book</h1>
                <p class="color-type-secondary">Add details for the new book</p>
            </div>
            <div class="col-md-5">
                <a href="@Url.Action("Index")" class="btn btn-primary p-xs m-t-lg">
                    <i class="glyph glyph-chevron-left m-r-xxxs p-b-xxxs"></i> Go back to the list
                </a>
            </div>
        </div>
    </div>
</div>

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger with-glyph alert-dismissible fade in" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">
                <i class="glyph glyph-cancel"></i>
            </span>
        </button>
        <span class="alert-glyph">
            <i class="glyph glyph-warning"></i>
        </span>
        <div class="alert-title">Error</div>
        <div class="row">
            <div class="col-md-24">
                <div class="type-t8">@Html.ValidationSummary()</div>
            </div>
        </div>
    </div>
}

<div class="container p-v-sm">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-group">
            @Html.LabelFor(model => model.Title)
            @Html.TextBoxFor(model => model.Title, new { @class = "form-control" })
            @if (ViewData.ModelState["Title"]?.Errors.Count > 0)
            {
                <span class="color-type-alert">
                    <i class="glyph glyph-warning"></i>
                    @Html.ValidationMessage("Title")
                </span>
            }

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Author)
            @Html.TextBoxFor(model => model.Author, new { @class = "form-control" })
            @if (ViewData.ModelState["Author"]?.Errors.Count > 0)
            {
                <span class="color-type-alert">
                    <i class="glyph glyph-warning"></i>
                    @Html.ValidationMessage("Author")
                </span>
            }

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ISBN)
            @Html.TextBoxFor(model => model.ISBN, new { @class = "form-control", type = "number" })
            @if (ViewData.ModelState["ISBN"]?.Errors.Count > 0)
            {
                <span class="color-type-alert">
                    <i class="glyph glyph-warning"></i>
                    @Html.ValidationMessage("ISBN")
                </span>
            }
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.PublicationYear)
            @Html.TextBoxFor(model => model.PublicationYear, new { @class = "form-control", type = "number" })
            @if (ViewData.ModelState["PublicationYear"]?.Errors.Count > 0)
            {
                <span class="color-type-alert">
                    <i class="glyph glyph-warning"></i>
                    @Html.ValidationMessage("PublicationYear")
                </span>
            }
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.CopiesAvailable)
            @Html.TextBoxFor(model => model.CopiesAvailable, new { @class = "form-control", type = "number" })
            @if (ViewData.ModelState["CopiesAvailable"]?.Errors.Count > 0)
            {
                <span class="color-type-alert">
                    <i class="glyph glyph-warning"></i>
                    @Html.ValidationMessage("CopiesAvailable")
                </span>
            }
        </div>


        <div class="form-group">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    }
</div>
